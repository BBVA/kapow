/*
 * Copyright 2019 Banco Bilbao Vizcaya Argentaria, S.A.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package server

import (
	"fmt"
	"log"

	"github.com/BBVA/kapow/internal/server/config"
	"github.com/BBVA/kapow/internal/server/control"
	"github.com/BBVA/kapow/internal/server/data"
	"github.com/BBVA/kapow/internal/server/user"
)

func runServer(server func(config.ServerConfig) error, cfg config.ServerConfig, errch chan error) {
	defer func() {
		if r := recover(); r != nil {
			errch <- fmt.Errorf("Server panic %v", r)
		}
	}()
	errch <- server(cfg)
}

// StartServer Starts one instance of each server in a goroutine and remains listening on a channel for trace events generated by them
func StartServer(cfg config.ServerConfig) {
	errch := make(chan error)

	go runServer(control.Run, cfg, errch)
	go runServer(data.Run, cfg, errch)
	go runServer(user.Run, cfg, errch)

	// Wait for ever
	err := <-errch
	if err != nil {
		log.Fatalf("Internal server error %v\n", err)
	}
}
