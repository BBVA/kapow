/*
 * Copyright 2019 Banco Bilbao Vizcaya Argentaria, S.A.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package server

import (
	"bytes"
	"crypto/rand"
	"crypto/rsa"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"io/ioutil"
	"log"
	"math/big"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/BBVA/kapow/internal/server/control"
	"github.com/BBVA/kapow/internal/server/data"
	"github.com/BBVA/kapow/internal/server/user"
)

type ServerConfig struct {
	ControlBindAddr,
	DataBindAddr,
	UserBindAddr,
	KeyFile,
	CertFile,
	ClientCaFile string

	ClientAuth,
	Debug bool

	ControlServerCert,
	ControlServerKey,
	ControlClientCert,
	ControlClientKey []byte
}

// StartServer Starts one instance of each server in a goroutine and remains listening on a channel for trace events generated by them
func StartServer(config ServerConfig) {
	var wg = sync.WaitGroup{}
	wg.Add(3)
	go control.Run(config.ControlBindAddr, &wg, config.ControlServerCert, config.ControlServerKey, config.ControlClientCert)
	go data.Run(config.DataBindAddr, &wg)
	go user.Run(config.UserBindAddr, &wg, config.CertFile, config.KeyFile, config.ClientCaFile, config.ClientAuth, config.Debug)

	// Wait for servers signals in order to return
	wg.Wait()
}

func GenCert(name, altName string) (certPEMBytes, certKeyBytes []byte) {

	usage := x509.ExtKeyUsageClientAuth
	if strings.HasSuffix(name, "_server") {
		usage = x509.ExtKeyUsageServerAuth
	}
	cert := &x509.Certificate{
		SerialNumber: big.NewInt(1),
		DNSNames:     []string{altName},
		Subject: pkix.Name{
			CommonName: name,
		},
		NotBefore:             time.Now(),
		NotAfter:              time.Now().AddDate(10, 0, 0),
		IsCA:                  false,
		BasicConstraintsValid: true,
		ExtKeyUsage: []x509.ExtKeyUsage{
			usage,
		},
	}

	certPrivKey, err := rsa.GenerateKey(rand.Reader, 4096)
	if err != nil {
		log.Fatal(err)
	}

	certBytes, err := x509.CreateCertificate(rand.Reader, cert, cert, &certPrivKey.PublicKey, certPrivKey)
	if err != nil {
		log.Fatal(err)
	}

	certPEM := new(bytes.Buffer)
	pem.Encode(certPEM, &pem.Block{
		Type:  "CERTIFICATE",
		Bytes: certBytes,
	})

	certPrivKeyPEM := new(bytes.Buffer)
	pem.Encode(certPrivKeyPEM, &pem.Block{
		Type:  "RSA PRIVATE KEY",
		Bytes: x509.MarshalPKCS1PrivateKey(certPrivKey),
	})

	certPEMBytes = certPEM.Bytes()
	certKeyBytes = certPrivKeyPEM.Bytes()
	return
}
